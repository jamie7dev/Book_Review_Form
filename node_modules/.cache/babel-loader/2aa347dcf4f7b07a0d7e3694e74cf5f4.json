{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\"; // 초기값\n\nconst initialState = {\n  comments: [],\n  isLoading: false,\n  error: null\n};\nexport const __getComments = createAsyncThunk(\"comments/getComments\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/comments\"); //http: 뒤에 슬래시 필요!!!(학습자료에 잘못 나와 있음)\n\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const commentSlice = createSlice({\n  name: \"comment\",\n  initialState,\n  reducers: {\n    createComment: (state, action) => {\n      state.comments.push(action.payload);\n    }\n  },\n  extraReducers: {\n    [__getComments.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getComments.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      console.log(state); // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.comments = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getComments.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    }\n  } // removeComment(state, action) {\n  //   let index = state.findIndex((comment) => comment.id === action.payload);\n  //   state.splice(index, 1);\n  // },\n  // updateComment(state, action) {\n  //   let index = state.findIndex((post) => post.id === action.payload.id);\n  //   state.splice(index, 1, action.payload);\n  // },\n\n});\nexport const {\n  createComment\n} = commentSlice.actions;\nexport default commentSlice;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","comments","isLoading","error","__getComments","payload","thunkAPI","data","get","fulfillWithValue","rejectWithValue","commentSlice","name","reducers","createComment","state","action","push","extraReducers","pending","fulfilled","console","log","rejected","actions"],"sources":["/Users/yoonchaewon/Desktop/dev/Food_-Recipe_/src/redux/modules/comment.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// 초기값\nconst initialState = {\n  comments: [],\n  isLoading: false,\n  error: null,\n};\n\nexport const __getComments = createAsyncThunk(\n  \"comments/getComments\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get(\"http://localhost:3001/comments\"); //http: 뒤에 슬래시 필요!!!(학습자료에 잘못 나와 있음)\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const commentSlice = createSlice({\n  name: \"comment\",\n  initialState,\n  reducers: {\n    createComment: (state, action) => {\n      state.comments.push(action.payload)\n  },\n},\n  extraReducers: {\n    [__getComments.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getComments.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      console.log(state)  // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.comments = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getComments.rejected]: (state, action) => {\n      state.isLoading = false;  // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n\n    // removeComment(state, action) {\n    //   let index = state.findIndex((comment) => comment.id === action.payload);\n    //   state.splice(index, 1);\n    // },\n\n    // updateComment(state, action) {\n    //   let index = state.findIndex((post) => post.id === action.payload.id);\n    //   state.splice(index, 1, action.payload);\n    // },\n\n  },\n);\n\nexport const { createComment } = commentSlice.actions;\nexport default commentSlice;"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EADS;EAEnBC,SAAS,EAAE,KAFQ;EAGnBC,KAAK,EAAE;AAHY,CAArB;AAMA,OAAO,MAAMC,aAAa,GAAGP,gBAAgB,CAC3C,sBAD2C,EAE3C,OAAOQ,OAAP,EAAgBC,QAAhB,KAA6B;EAC3B,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAU,gCAAV,CAAnB,CADE,CAC8D;;IAChE,OAAOF,QAAQ,CAACG,gBAAT,CAA0BF,IAAI,CAACA,IAA/B,CAAP;EACD,CAHD,CAGE,OAAOJ,KAAP,EAAc;IACd,OAAOG,QAAQ,CAACI,eAAT,CAAyBP,KAAzB,CAAP;EACD;AACF,CAT0C,CAAtC;AAYP,OAAO,MAAMQ,YAAY,GAAGb,WAAW,CAAC;EACtCc,IAAI,EAAE,SADgC;EAEtCZ,YAFsC;EAGtCa,QAAQ,EAAE;IACRC,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAChCD,KAAK,CAACd,QAAN,CAAegB,IAAf,CAAoBD,MAAM,CAACX,OAA3B;IACH;EAHS,CAH4B;EAQtCa,aAAa,EAAE;IACb,CAACd,aAAa,CAACe,OAAf,GAA0BJ,KAAD,IAAW;MAClCA,KAAK,CAACb,SAAN,GAAkB,IAAlB,CADkC,CACV;IACzB,CAHY;IAIb,CAACE,aAAa,CAACgB,SAAf,GAA2B,CAACL,KAAD,EAAQC,MAAR,KAAmB;MAC5CD,KAAK,CAACb,SAAN,GAAkB,KAAlB;MACAmB,OAAO,CAACC,GAAR,CAAYP,KAAZ,EAF4C,CAExB;;MACpBA,KAAK,CAACd,QAAN,GAAiBe,MAAM,CAACX,OAAxB,CAH4C,CAGX;IAClC,CARY;IASb,CAACD,aAAa,CAACmB,QAAf,GAA0B,CAACR,KAAD,EAAQC,MAAR,KAAmB;MAC3CD,KAAK,CAACb,SAAN,GAAkB,KAAlB,CAD2C,CACjB;;MAC1Ba,KAAK,CAACZ,KAAN,GAAca,MAAM,CAACX,OAArB,CAF2C,CAEb;IAC/B;EAZY,CARuB,CAuBpC;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;;AA/BoC,CAAD,CAAhC;AAoCP,OAAO,MAAM;EAAES;AAAF,IAAoBH,YAAY,CAACa,OAAvC;AACP,eAAeb,YAAf"},"metadata":{},"sourceType":"module"}